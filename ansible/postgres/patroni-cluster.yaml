---
- name: Setup PostgreSQL and Patroni
  hosts: all
  become: yes
  gather_facts: no
  tasks:
    - name: Wait 600 seconds for target connection to become reachable/usable
      ansible.builtin.wait_for_connection:

    - name: Gather facts
      ansible.builtin.setup:
      
    - name: Set local_ip to GCP internal IP
      set_fact:
        local_ip: "{{ ansible_facts['default_ipv4']['address'] }}"

    - name: Set node_name to hostname
      set_fact:
        node_name: "{{ ansible_facts['hostname'] }}"
    - name: Set local_ip to GCP internal IP
      set_fact:
        local_ip: "{{ ansible_facts['default_ipv4']['address'] }}"

    - name: Print hostname
      ansible.builtin.debug:
        msg: "Host {{ node_name }} -> {{ local_ip }}"

    - name: Print all nodes
      ansible.builtin.debug:
        msg: "{{ groups['all'] }}"

    #- name: Download etcd
    #  ansible.builtin.get_url:
    #    url: https://github.com/etcd-io/etcd/releases/download/v3.5.17/etcd-v3.5.17-linux-amd64.tar.gz
    #    dest: "{{ temp_dir.path }}"

    #- name: Create a temporary directory
    #  ansible.builtin.tempfile:
    #    state: directory
    #  register: temp_dir

    #- name: Use the temporary directory
    #  ansible.builtin.command:
    #    cmd: echo "Working in {{ temp_dir.path }}"

    #- name: untar etcd
    #  ansible.builtin.shell: tar -xvf {{ temp_dir.path }}/etcd-v3.5.17-linux-amd64.tar.gz -C {{ temp_dir.path }}

    #- name: rm etcd-v3.5.17-linux-amd64.tar.gz
    #  ansible.builtin.shell: rm {{ temp_dir.path }}/etcd-v3.5.17-linux-amd64.tar.gz

    #- name: install binaries
    #  ansible.builtin.shell: cp {{ temp_dir.path }}/etcd-v3.5.17-linux-amd64/etcd* /usr/local/bin

    #- name: remove install folder
    #  ansible.builtin.shell: rm -rf {{ temp_dir.path }}/etcd-v3.5.17-linux-amd64

    #- name: Create systemd service
    #  become: yes
    #  ansible.builtin.copy:
    #    dest: "/etc/systemd/system/etcd.service"
    #    content: |
    #      [Unit]
    #      Description=etcd

    #      [Service]
    #      Type=notify
    #      EnvironmentFile=/etc/default/etcd
    #      ExecStart=/usr/local/bin/etcd
    #      Restart=on-failure
    #      RestartSec=5

    #      [Install]
    #      WantedBy=multi-user.target

    - name: Install etcd and etcdctl
      package:
        name:
          - etcd
          - etcdctl
        state: present

    - name: Removing default etcd config
      become: yes
      ansible.builtin.command:
        cmd: rm /etc/sysconfig/etcd

    - name: Create etcd config
      become: yes
      ansible.builtin.copy:
        #dest: "/etc/default/etcd"
        dest: "/etc/sysconfig/etcd"
        content: |
          ETCD_NAME={{ node_name }}
          ##ETCD_DATA_DIR=/var/lib/etcd
          ETCD_INITIAL_CLUSTER=patroni-1=http://patroni-1:2380,patroni-2=http://patroni-2:2380,etcd-3=http://etcd-3:2380
          ETCD_INITIAL_ADVERTISE_PEER_URLS=http://{{ local_ip }}:2380
          ETCD_ADVERTISE_CLIENT_URLS=http://{{ local_ip }}:2379
          ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
          ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
          ETCD_ENABLE_V2="true"

    - name: Reload systemd manager configuration
      become: yes
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start etcd service
      become: yes
      ansible.builtin.systemd:
        name: etcd
        enabled: yes
        state: started
    #- name: Update package list
    #  package:
    #    update_cache: yes

    #- name: Upgrade all packages
    #  package:
    #    upgrade: dist

    - name: Install PostgreSQL and development libraries
      package:
        name:
          - postgresql
          #- postgresql-server-dev-14
          - postgresql-contrib
          - postgresql16-devel
          - postgresql16-server-devel
        state: present

    - name: Stop PostgreSQL service
      service:
        name: postgresql
        state: stopped


    - name: Create symbolic links for PostgreSQL binaries
      shell: ln -s /usr/lib/postgresql16/bin/* /usr/local/bin/
      args:
        creates: /usr/bin/initdb

    - name: Install Python 3 and pip
      package:
        name:
          - python3
          - python3-pip
          - gcc
          - python3-devel
        state: present

    - name: Install psycopg2-binary
      ansible.builtin.pip:
        name: psycopg2-binary

    - name: Install Patroni
      pip:
        name: patroni

    - name: Install python-etcd
      pip:
        name: python-etcd

    - name: Create Patroni configuration directory
      file:
        path: /data/patroni
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    #- name: Delete postgres folder
    #  shell: rm -rf /etc/postgresql/14/main

    - name: Create Patroni systemd service file
      become: yes
      copy:
        dest: /etc/systemd/system/patroni.service
        content: |
          [Unit]
          Description=High availability PostgreSQL Cluster
          After=syslog.target network.target

          [Service]
          Type=simple
          User=postgres
          Group=postgres
          ExecStart=/usr/bin/patroni /etc/patroni.yml
          KillMode=process
          TimeoutSec=30
          Restart=no

          [Install]
          WantedBy=multi-user.target
        owner: root
        group: root
        mode: '0644'

    - name: Create patroni configuration file
      become: yes
      copy:
        dest: /etc/patroni.yml
        content: |
          scope: postgresql-cluster
          namespace: /service/
          name: {{ node_name }}  # This should be unique for each node (e.g., postgres-node-1, postgres-node-2, postgres-node-3)

          restapi:
            listen: {{ local_ip }}:8008  # Replace with the respective IP of each PostgreSQL node
            connect_address: {{ local_ip }}:8008  # Node-specific IP

          etcd:
            hosts:
              - patroni-1:2379
              - patroni-2:2379
              - etcd-3:2379

          bootstrap:
            pg_hba:
              - host all,replication all,replication 0.0.0.0/0 md5
            dcs:
              ttl: 30
              loop_wait: 10
              retry_timeout: 10
              maximum_lag_on_failover: 1048576
              postgresql:
                use_pg_rewind: true
                parameters:
                  max_connections: 100
                  wal_level: replica
                  hot_standby: "on"
                  max_wal_senders: 5
                  max_replication_slots: 5

            initdb:
              - encoding: UTF8
              - data-checksums
            

            users:
              admin:
                password: "admin_password_here"
                options:
                  - createrole
                  - createdb

          postgresql:
            listen: {{ local_ip }}:5432
            connect_address: {{ local_ip }}:5432
            data_dir: /var/lib/pgsql/main
            bin_dir: /usr/lib/postgresql16/bin
            config_dir: /var/lib/pgsql/main
            pgpass: /tmp/pgpass
            
            authentication:
              replication:
                username: replicator
                password: "replicator_password_here"
              superuser:
                username: postgres
                password: "postgres_password_here"
              rewind:
                username: rewind_user
                password: "rewind_password_here"

            parameters:
              unix_socket_directories: '/var/run/postgresql'
              shared_buffers: 512MB
              work_mem: 4MB
              maintenance_work_mem: 64MB
              checkpoint_timeout: 5min
              max_wal_size: 1GB
              min_wal_size: 80MB
              log_line_prefix: '%m [%p] %q%u@%d '
              log_checkpoints: "on"
              log_connections: "on"
              log_disconnections: "on"
              log_lock_waits: "on"
              log_statement: "ddl"
              log_temp_files: 0

          tags:
            nofailover: false
            noloadbalance: false
            clonefrom: false
            nosync: false
        owner: root
        group: root
        mode: '0644'
    - name: Enable Patroni service
      systemd:
        name: patroni
        enabled: yes
    - name: Start Patroni service
      systemd:
        name: patroni
        state: started